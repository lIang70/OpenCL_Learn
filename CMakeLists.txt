CMAKE_MINIMUM_REQUIRED(VERSION 3.8)

PROJECT(OpenCL_Learn VERSION 0.1)

MESSAGE(STATUS "CMAKE_C_COMPILER_ID = ${CMAKE_C_COMPILER_ID}")
MESSAGE(STATUS "CMAKE_CXX_COMPILER_ID = ${CMAKE_CXX_COMPILER_ID}")

MESSAGE(STATUS "CMAKE_C_COMPILER = ${CMAKE_C_COMPILER}")
MESSAGE(STATUS "CMAKE_CXX_COMPILER = ${CMAKE_CXX_COMPILER}")
MESSAGE(STATUS "CMAKE_CXX_COMPILER_VERSION = ${CMAKE_CXX_COMPILER_VERSION}")

MESSAGE(STATUS "CMAKE_HOST_SYSTEM: ${CMAKE_HOST_SYSTEM} ")

SET(CMAKE_INCLUDE_CURRENT_DIR ON)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
SET(CMAKE_CXX_STANDARD 17)

OPTION(feframe_build_with_debuginfo "Build FeFrame with DEBUG-INFO" ON)

IF(feframe_build_with_debuginfo)
    SET(CMAKE_BUILD_TYPE RelWithDebInfo)

    IF(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2 -ggdb -pthread")
    ELSEIF(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /O2 /DEBUG /Zi /EHa")
    ENDIF()
ELSE()
    SET(CMAKE_BUILD_TYPE MinSizeRel)

    IF(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2 -pthread")
    ELSEIF(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /O2 /EHa")
    ENDIF()
ENDIF()

# add 3rd lib
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/include)
LINK_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/lib)

# Add OpenCL
SET(CMAKE_PREFIX_PATH ${CMAKE_SOURCE_DIR}/3rdparty/OpenCL) # Specify the OpenCL library path
FIND_PACKAGE(OpenCL)

INCLUDE(CMakePrintHelpers)
CMAKE_PRINT_VARIABLES(OpenCL_FOUND)
CMAKE_PRINT_VARIABLES(OpenCL_INCLUDE_DIRS)
CMAKE_PRINT_VARIABLES(OpenCL_LIBRARIES)
CMAKE_PRINT_VARIABLES(OpenCL_INCLUDE_DIR)
CMAKE_PRINT_VARIABLES(OpenCL_LIBRARY)

ADD_SUBDIRECTORY(01_begin)
ADD_SUBDIRECTORY(02_add)